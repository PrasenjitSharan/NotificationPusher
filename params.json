{"body":"# NotificationPusher\r\n\r\nPHP library for easy Apple/Android notification message pushing.\r\n\r\n## WORK IN PROGRESS.\r\n\r\n[![Continuous Integration status](https://secure.travis-ci.org/Ph3nol/NotificationPusher.png)](http://travis-ci.org/Ph3nol/NotificationPusher)\r\n\r\n## Requirements\r\n\r\n* PHP 5.3+\r\n* PHP Curl extension - +SSL support (for AndroidPusher service)\r\n* PHP OpenSSL extension (for ApplePusher service)\r\n\r\n## Installation\r\n\r\n### Add to your project Composer packages\r\n\r\nJust add `sly/notification-pusher` package to the requirements of your Composer JSON configuration file,\r\nand run `php composer.phar install` to install it.\r\n\r\n### Install from GitHub\r\n\r\nClone this library from Git with `git clone https://github.com/Ph3nol/NotificationPusher.git`.\r\n\r\nGoto to the library directory, get Composer phar package and install vendors:\r\n\r\n```\r\ncurl -s https://getcomposer.org/installer | php\r\nphp composer.phar install\r\n```\r\n\r\nYou're ready to go.\r\n\r\n## Example\r\n\r\n### Apple push (iPhone / iPad)\r\n\r\n* Requirements: create a developer SSL certificate for your application\r\n\r\n``` php\r\n<?php\r\n\r\nrequire_once '/path/to/your/vendor/autoload.php';\r\n\r\nuse Sly\\NotificationPusher\\Model\\Message;\r\nuse Sly\\NotificationPusher\\Pusher\\ApplePusher;\r\n\r\n/**\r\n * Initialize Apple pusher service.\r\n */\r\n$pusher = new ApplePusher(array(\r\n    'dev'                    => true,                             // Developer/Sandbox mode enabled (default: false)\r\n    'simulate'               => false,                            // Simulate sendings (default: false)\r\n    'certificate'            => '/path/to/your/certificate.pem',\r\n    'certificate_passphrase' => 'myPassPhrase',                   // Generated certificate passphrase (if needed)\r\n    'devices'                => array('D3v1c3T0k3n1', 'D3v1c3T0k3n2', 'D3v1c3T0k3n3'), // Apple Device Tokens\r\n));\r\n\r\n/**\r\n * Add some test pushes.\r\n */\r\nfor ($i = 1; $i <= 3; $i++) {\r\n    $message = new Message(sprintf('This is Test #%d', $i));\r\n    // $message->setAlert(false);           // Don't display message\r\n    // $message->setBadge(5);               // Increment users badges with '5'\r\n    // $message->setSound('bingbong.aiff'); // Set specific sound\r\n\r\n    $pusher->addMessage($message);\r\n}\r\n\r\n/**\r\n * Push queue.\r\n */\r\n$pushedMessages = $pusher->push();\r\n```\r\n\r\nTo manage users badges, we can pass a specific array to the pusher service (instead of passing an array of tokens).\r\nThis array contains 2 informations: the device token and the actual user badge count. Here is an example of\r\nan ApplePusher service instance:\r\n\r\n``` php\r\n$pusher = new ApplePusher(array(\r\n    'dev'                    => true,                             // Developer/Sandbox mode enabled (default: false)\r\n    'simulate'               => false,                            // Simulate sendings (default: false)\r\n    'certificate'            => '/path/to/your/certificate.pem',\r\n    'devices'                => array(\r\n        array('D3v1c3T0k3n1', 0), // User 1 has a '0' badge count\r\n        array('D3v1c3T0k3n2', 5), // User 2 has a '5' badge count\r\n        array('D3v1c3T0k3n3', 2), // User 3 has a '2' badge count\r\n        // ...\r\n    ),\r\n));\r\n```\r\n\r\nEach user badge count will be incremented with the Message object badge parameter.\r\n\r\n### Android push\r\n\r\n* Requirements: get a Google account project API key\r\n\r\n``` php\r\n<?php\r\n\r\nrequire_once '/path/to/your/vendor/autoload.php';\r\n\r\nuse Sly\\NotificationPusher\\Model\\Message;\r\nuse Sly\\NotificationPusher\\Pusher\\AndroidPusher;\r\n\r\n/**\r\n * Initialize Android pusher service.\r\n */\r\n$pusher = new AndroidPusher(array(\r\n    'applicationID' => '123456789012', // Your Google project application ID\r\n    'apiKey'        => 'y0ur4p1k3y',   // Your Google account project API key\r\n    'devices'       => array('D3v1c3T0k3n1', 'D3v1c3T0k3n2', 'D3v1c3T0k3n3'), // Android register IDs\r\n));\r\n\r\n/**\r\n * Add some test pushes.\r\n */\r\nfor ($i = 1; $i <= 3; $i++) {\r\n    $message = new Message(sprintf('This is Test #%d', $i));\r\n\r\n    $pusher->addMessage($message);\r\n}\r\n\r\n/**\r\n * Push queue.\r\n */\r\n$pushedMessages = $pusher->push();\r\n\r\n```\r\n\r\n## Test with Atoum\r\n\r\nThis library is using [Atoum](https://github.com/mageekguy/atoum) for unit testing,\r\nwhose Composer package can be installed with `dev` mode:\r\n\r\n```\r\nphp composer install --dev\r\n./atoum -d tests/units\r\n```\r\n","tagline":"PHP library for easy Apple/Android notification message pushing.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"NotificationPusher"}